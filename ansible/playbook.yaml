- name: Terraform
  hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: Repository Hashicorp
      become: yes
      command: wget -O- https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

    - name: Installazione di Terraform
      become: yes
      dnf:
        name: terraform
        state: present

    - name: Controllo della versione di Terraform
      command: terraform --version
      register: terraform_version_output

    - name: Stampare la versione di Terraform
      debug:
        msg: "{{ terraform_version_output.stdout }}"
      when: terraform_version_output.rc == 0

    - name: Esegui terraform init
      command: terraform init
      args:
        chdir: ../terraform

    - name: Esegui terraform plan
      command: terraform plan --out plan
      args:
        chdir: ../terraform

    - name: Applica il piano terraform
      command: terraform apply -auto-approve
      args:
        chdir: ../terraform

- name: Leggi gli host dall'inventario
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Carica gli host dall'inventario
      include_vars:
        file: inventory.yaml
        name: inventory_data

    - name: Converti il dizionario in una lista di coppie chiave-valore
      set_fact:
        host_list: "{{ inventory_data['all']['hosts'] | dict2items }}"

    - name: Aggiungi gli host all'inventario in runtime
      add_host:
        name: "{{ item.value.ansible_host }}"
        groups: runtime_hosts
      loop: "{{ host_list }}"

- name: Setta opzioni SSH globali
  hosts: all
  gather_facts: no
  tasks:
    - name: Imposta opzioni SSH globali
      ansible.builtin.set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"


- name: Pinga tutti gli host
  hosts: all
  tasks:
    - name: Pinga gli host
      ansible.builtin.ping:

    - name: Stampa messaggio
      ansible.builtin.debug:
        msg: "Ciao! Siamo i nodi K8s"

- name: Disable SELinux
  become: true
  hosts: all
  tasks:
    - name: Set SELinux to permissive mode
      command: setenforce 0

    - name: Modify SELinux configuration to disabled
      lineinfile:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'

- name: Set up kernel modules and networking
  hosts: all
  become: true
  tasks:
    - name: Add other nodes' IPs and hostnames to /etc/hosts

      # Incompleto: stringa /etc/hosts da completare
      debug:
        msg: "Sto scrivendo negli /etc/hosts" 
    - name: containerd config
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Enable overlay kernel module
      modprobe:
        name: overlay
        state: present

    - name: Enable br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: configure network bridge (kubernetes.conf)
      copy:
        dest: /etc/sysctl.d/kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables=1
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1

    - name: configure network bridge (k8s.conf)
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1
          net.bridge.bridge-nf-call-ip6tables=1

    - name: Set net.bridge.bridge-nf-call-iptables to 1
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present
      become: true

    - name: Apply net.bridge.bridge-nf-call-ip6tables parameter
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: 1
      become: true

    - name: Apply net.bridge.bridge-nf-call-iptables parameter
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
      become: true

    - name: Apply net.ipv4.ip_forward parameter
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
      become: true


- name: Install Kubernetes and containerd
  hosts: all
  become: true

  tasks:
    - name: Add Docker YUM repository
      command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Add kubernetes repo
      copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

    - name: Clear cache
      command: yum clean all

    - name: Install kubeadm, kubelet and kubectl, containerd
      ansible.builtin.dnf:
        name:
          - kubeadm
          - kubelet
          - kubectl
          - "containerd.io"
        state: latest
        disable_excludes: kubernetes

- name: Configure containerd
  hosts: all
  become: true

  tasks:
    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    - name: Remove existing containerd config file
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Modify SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: '^SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Enable and restart containerd service
      service:
        name: containerd
        enabled: yes
        state: restarted

    - name: Enable and restart kubelet service
      service:
        name: kubelet
        enabled: yes
        state: restarted

- name: Init control plane on kube-master
  hosts: kube-master
  become: true

  tasks:
    - name: kubeadm init
      command: kubeadm init --control-plane-endpoint=kube-master

    - name: create token
      command: kubeadm token create --print-join-command
      register: token

    - name: print token
      debug:
        msg: "{{ token.stdout }}"

    - name: wait for kubeadm init
      ansible.builtin.pause:
        minutes: 2

    - name: kubectl apply
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
